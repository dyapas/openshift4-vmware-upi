- name: Create VMs (Cluster Placement)
  include_tasks: vms-cluster-placement.yaml
  loop: "{{ groups[provision_group] }}"
  when:
    - hostvars[item].node_type in _node_scope
    - hostvars[item].hypervisor is not defined

- name: Create VMs (Hypervisor Placement)
  include_tasks: vms-hypervisor-placement.yaml
  loop: "{{ groups[provision_group] }}"
  when:
    - hostvars[item].node_type in _node_scope
    - hostvars[item].hypervisor is defined

- name: Get VM Facts
  community.vmware.vmware_guest_info:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: no
    datacenter: "{{ vcenter_datacenter }}"
    name: "{{ item }}.{{ base_domain }}"
  loop: "{{ groups[provision_group] }}"
  register: vmware_guest_info_results
  when:
    - hostvars[item].node_type in _node_scope

- name: Reset disk_name_dict (Support Iterative Role Execution)
  ansible.builtin.set_fact:
    disk_name_dict: []

- name: Combine Applicable Disks & Hostnames into Dictionary for Easy Lookup
  ansible.builtin.set_fact:
    disk_name_dict: >-
      {{
        disk_name_dict +
        [
          {
            'name': item,
            'disks': hostvars[item].disks | default([])
          }
        ]
      }}
  loop: "{{ groups[provision_group] }}"
  when:
    - hostvars[item].node_type in _node_scope

- name: Add Disks to VMs
  community.vmware.vmware_guest_disk:
    datacenter: "{{ vcenter_datacenter }}"
    disk:
      - controller_number: "{{ item.1.controller_number }}"
        datastore: "{{ item.1.datastore }}"
        size_gb: "{{ item.1.size_gb }}"
        state: present
        type: thin
        unit_number: "{{ item.1.unit_number }}"
    folder: "/{{ vcenter_datacenter }}/vm/{{ cluster_name }}"
    hostname: "{{ vcenter_hostname }}"
    name: "{{ item.0.name }}.{{ base_domain }}"
    password: "{{ vcenter_password }}"
    username: "{{ vcenter_username }}"
    validate_certs: no
  with_subelements:
    - "{{ disk_name_dict }}"
    - disks
    - skip_missing: False

# - name: Combine Hostname/IP/MAC into Dictionary for Easy Lookup
#   set_fact:
#     host_mac_list: >-
#       {{
#         host_mac_list | default([]) +
#         [
#           {
#             'name': item.item,
#             'mac': item.instance.hw_eth0.macaddress,
#             'ip': hostvars[item.item]['ip']
#           }
#         ]
#       }}
#   with_items:
#     - "{{ vmware_guest_info_results.results }}"
#   when:
#     - hostvars[item.item].node_type in _node_scope

# - name: Debug host_mac_list
#   debug:
#     var: host_mac_list
